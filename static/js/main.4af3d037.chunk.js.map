{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["USDC","props","state","address","ethBalance","BigNumber","from","balance","waiting","txHash","undefined","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","getAddress","balanceOf","usdcBalance","getBalance","this","setState","gimmeSome","gasPrice","tx","console","log","hash","wait","receipt","blockNumber","gasUsed","toString","fragment","spinner","Spinner","animation","role","className","Alert","Link","href","Row","Col","utils","formatUnits","Button","onClick","Component","App","Container","Jumbotron","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af3d037.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from \"react\";\nimport { BigNumber, ethers } from 'ethers';\n// import './App.css';\nimport { Alert, Jumbotron, Spinner } from 'react-bootstrap';\nimport Container from 'react-bootstrap/Container';\nimport {Col, Row} from 'react-bootstrap'\nimport Button from 'react-bootstrap/Button';\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nfunction App() {\n  return (\n    <Container>\n    <Jumbotron>\n      <h1 className=\"header\">\n      USDC FrontEnd Example\n      </h1>\n    </Jumbotron>\n    <USDC></USDC>\n    </Container>\n  );\n}\n\ntype USDCProps = {}\ntype USDCState = {\n  address: string\n  ethBalance: BigNumber,\n  balance: BigNumber,\n  waiting: boolean,\n  txHash?: string,\n};\nclass USDC extends Component<USDCProps,USDCState> {\n\n  constructor(props: USDCProps) {\n    super(props);\n    this.state = {\n      address: \"waiting\",\n      ethBalance: BigNumber.from(0),\n      balance: BigNumber.from(0),\n      waiting: false,\n      txHash: undefined,\n    };\n  }\n\n  async componentDidMount() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(\n      \"0x68ec573C119826db2eaEA1Efbfc2970cDaC869c4\",\n      [\n        \"function balanceOf(address _owner) public view returns (uint256 balance)\",\n      ],\n      signer\n    )\n    const address = await signer.getAddress()\n    const usdcBalance = await contract.balanceOf(address);\n    const balance = (await signer.getBalance())\n    this.setState( {balance: usdcBalance, ethBalance: balance, address: address });\n  }\n\n  async gimmeSome() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(\n      \"0x68ec573C119826db2eaEA1Efbfc2970cDaC869c4\",\n      [\n        \"function gimmeSome() external\",\n        \"function balanceOf(address _owner) public view returns (uint256 balance)\",\n      ],\n      signer\n    )\n    const address = await signer.getAddress()\n\n    const tx = await contract.gimmeSome({ gasPrice: 40e9 });\n\n    console.log(`Transaction hash: ${tx.hash}`);\n    this.setState( {waiting: true, txHash: tx.hash} );\n\n    const receipt = await tx.wait();\n    console.log(`Transaction confirmed in block ${receipt.blockNumber}`);\n    console.log(`Gas used: ${receipt.gasUsed.toString()}`);\n\n    const usdcBalance = await contract.balanceOf(address);\n    const balance = (await signer.getBalance())\n    this.setState( {balance: usdcBalance, waiting: false, ethBalance: balance });\n  }\n\n render() {\n    let fragment = <></>\n    let spinner = <></>\n    if(this.state.waiting) {\n      spinner = <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    }\n    if(this.state.txHash) {\n      fragment = <Alert>\n        {spinner}\n        <Alert.Link href={\"https://ropsten.etherscan.io/tx/\" + this.state.txHash}>Transaction</Alert.Link>\n      </Alert>\n    }\n    return (\n      <>\n      <Row>\n        <Col>\n          <h2>User Address</h2>\n          <p> {this.state.address} </p>\n        </Col>\n        <Col>\n          <h2>\n            User ETH Balance: {ethers.utils.formatUnits(this.state.ethBalance, 18)}\n          </h2>\n        </Col>\n      </Row>\n      <Row>\n      <Col>\n        <h2>\n        User USDC Balance: {ethers.utils.formatUnits(this.state.balance, 6)}\n        </h2>\n      </Col>\n      <Col>\n        <Button onClick={async () => {await this.gimmeSome()}}>\n          GimmeSome!\n        </Button>\n        {fragment}\n      </Col>\n      </Row>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}